---
import { categories, PAGE_CATEGORY } from "../../utils/consts";
import Layout from "@/layouts/Layout.astro";
import { POST_TYPE } from "@/utils/consts";
import { random } from "@/utils/utils";
import { PAGES_HEAD_INFO } from "@/utils/consts";
import PageHeadInfo from "@/components/PageHeadInfo.astro";
import Post from "@/components/PostCard.astro";
import {type MarkdownInstance} from "astro";

export async function getStaticPaths():Promise<{params: {category: PAGE_CATEGORY}, props: {posts: MarkdownInstance<Record<string, any>>[]}}[]> {
  const allPosts = await Astro.glob("../../**/*.md");

  return categories.flatMap((category: PAGE_CATEGORY) => {
    const filteredPosts = allPosts.filter((post) => {
      if (post.frontmatter.category === category) {
        return post;
      }
    });

    return {
      params: { category: category },
      props: {
        posts: filteredPosts,
      },
    };
  });
}

const getPostVisualType = (evenMax: number, oddMax: number): POST_TYPE => {
  const even = random(1, evenMax) % 2 === 0;
  const odd = random(1, oddMax) % 3 === 0;

  return even ? POST_TYPE.POST_SM : odd ? POST_TYPE.POST_MD : POST_TYPE.POST_LG;
};

const { posts } = Astro.props;
const { category } = Astro.params;
---

<Layout>
  <PageHeadInfo
    title={PAGES_HEAD_INFO[category as PAGE_CATEGORY].title}
    description={PAGES_HEAD_INFO[category as PAGE_CATEGORY].description}
  />

  <section class={`container mx-auto`}>
    <section class={`flex flex-wrap -mx-2`}>
      {
        Array.from(Array(3).keys()).map((_, rowIndex) => {
          const maxItems = Math.round(posts.length / 3);
          const min = rowIndex * maxItems;
          const max = rowIndex * maxItems + maxItems;

          return (
            <article class={`w-full md:w-1/3 px-1 md:px-2`}>
              {posts.slice(min, max).map((post) => {
                return (
                  <Post
                    title={post.frontmatter.title}
                    author={post.frontmatter.author}
                    authorAvatar={post.frontmatter.authorAvatar}
                    postThumbnail={post.frontmatter.image}
                    tags={post.frontmatter.tags}
                    date={post.frontmatter.publishedDate}
                    postSlug={post.frontmatter.slug}
                    postCategory={post.frontmatter.category}
                    postVisualType={getPostVisualType(max, min)}
                  />
                );
              })}
            </article>
          );
        })
      }
    </section>
  </section>
</Layout>
